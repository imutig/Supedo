import { Events, MessageFlags } from 'discord.js';
import { ClientWithCommands } from '../index';
import { routeButtonInteraction, routeSelectInteraction, routeModalInteraction, sendErrorReply } from '../utils/interactionRouter';

module.exports = {
  name: Events.InteractionCreate,
  async execute(interaction: any) {
    console.log(`üéØ [INTERACTION] Nouvelle interaction re√ßue de ${interaction.user.tag} (${interaction.user.id})`);
    console.log(`üìã [INTERACTION] Type: ${interaction.type}, Serveur: ${interaction.guild?.name || 'DM'}`);
    
    try {
      if (interaction.isChatInputCommand()) {
        await handleSlashCommand(interaction);
      } else if (interaction.isButton()) {
        console.log(`üîò [BUTTON] Bouton cliqu√©: ${interaction.customId} par ${interaction.user.tag}`);
        await routeButtonInteraction(interaction);
      } else if (interaction.isStringSelectMenu()) {
        await routeSelectInteraction(interaction);
      } else if (interaction.isModalSubmit()) {
        await routeModalInteraction(interaction);
      }
    } catch (error) {
      console.error('[ERREUR] Erreur lors du traitement de l\'interaction :', error);
    }
  },
};

async function handleSlashCommand(interaction: any): Promise<void> {
  console.log(`‚ö° [SLASH COMMAND] Commande: /${interaction.commandName}`);
  
  const client = interaction.client as ClientWithCommands;
  const command = client.commands.get(interaction.commandName);

  if (!command) {
    console.error(`‚ùå [SLASH COMMAND] Aucune commande correspondant √† ${interaction.commandName} n'a √©t√© trouv√©e.`);
    return;
  }

  console.log(`‚úÖ [SLASH COMMAND] Commande ${interaction.commandName} trouv√©e, ex√©cution...`);
  try {
    await command.execute(interaction);
    console.log(`‚úÖ [SLASH COMMAND] Commande ${interaction.commandName} ex√©cut√©e avec succ√®s pour ${interaction.user.tag}`);
  } catch (error) {
    await sendErrorReply(interaction, error, `Erreur d'ex√©cution de commande ${interaction.commandName} pour ${interaction.user.tag}`);
  }
}
