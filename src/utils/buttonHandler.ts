import { 
  EmbedBuilder, 
  ActionRowBuilder, 
  ButtonBuilder, 
  ButtonStyle, 
  ChannelType,
  PermissionFlagsBits,
  MessageFlags,
  ModalBuilder,
  TextInputBuilder,
  TextInputStyle
} from 'discord.js';
import { RoleRequestDB, TicketDB, RoleGroupDB, TicketCategoryDB } from '../utils/database';
import { AppDataSource } from '../utils/dataSource';

export async function handleRoleButtons(interaction: any) {
  console.log(`üéõÔ∏è [ROLE BUTTON] D√©but du traitement de bouton de r√¥le par ${interaction.user.tag}`);
  
  const [action, , userId, roleId] = interaction.customId.split('_');
  console.log(`üîç [ROLE BUTTON] Action: ${action}, Utilisateur cible: ${userId}, R√¥le: ${roleId}`);
  
  // Check if user has permission to manage roles
  if (!interaction.member.permissions.has(PermissionFlagsBits.ManageRoles)) {
    console.log(`‚ùå [ROLE BUTTON] Permission refus√©e pour ${interaction.user.tag} - ManageRoles requis`);
    return interaction.reply({ content: 'Vous n\'avez pas la permission de g√©rer les demandes de r√¥les !', flags: MessageFlags.Ephemeral });
  }

  console.log(`üîç [ROLE BUTTON] Recherche de la demande de r√¥le en base de donn√©es`);
  const request = await RoleRequestDB.findByUserAndRole(userId, roleId);
  
  if (!request) {
    console.log(`‚ùå [ROLE BUTTON] Demande de r√¥le introuvable pour utilisateur ${userId} et r√¥le ${roleId}`);
    return interaction.reply({ content: 'Cette demande de r√¥le n\'existe plus !', flags: MessageFlags.Ephemeral });
  }

  console.log(`‚úÖ [ROLE BUTTON] Demande trouv√©e (ID: ${request.id}, Status: ${request.status})`);

  const guild = interaction.guild;
  console.log(`üë§ [ROLE BUTTON] R√©cup√©ration du membre et du r√¥le`);
  const member = await guild.members.fetch(userId);
  const role = await guild.roles.fetch(roleId);

  if (!member || !role) {
    console.log(`‚ùå [ROLE BUTTON] Membre ou r√¥le introuvable - Membre: ${!!member}, R√¥le: ${!!role}`);
    return interaction.reply({ content: 'Membre ou r√¥le introuvable !', flags: MessageFlags.Ephemeral });
  }

  console.log(`‚úÖ [ROLE BUTTON] Membre et r√¥le trouv√©s - ${member.user.tag}, R√¥le: ${role.name}`);

  if (action === 'approve') {
    console.log(`‚úÖ [ROLE APPROVE] D√©but de l'approbation de r√¥le pour ${member.user.tag}`);
    try {
      await member.roles.add(role);
      
      // Update request status
      await RoleRequestDB.updateStatus(request.id, 'approved', interaction.user.id);

      const embed = new EmbedBuilder()
        .setTitle('Demande de R√¥le Approuv√©e')
        .setDescription(`${member.user.tag} a re√ßu le r√¥le **${role.name}**.`)
        .setColor(0x00FF00)
        .addFields(
          { name: 'Approuv√© par', value: `<@${interaction.user.id}>`, inline: true },
          { name: 'Utilisateur', value: `<@${member.user.id}>`, inline: true },
          { name: 'R√¥le', value: `<@&${role.id}>`, inline: true }
        )
        .setTimestamp();

      await interaction.update({ embeds: [embed], components: [] });

    } catch (error) {
      await interaction.reply({ content: '√âchec de l\'ajout du r√¥le √† l\'utilisateur !', flags: MessageFlags.Ephemeral });
    }
  } else if (action === 'deny') {
    await RoleRequestDB.updateStatus(request.id, 'denied', interaction.user.id);

    const embed = new EmbedBuilder()
      .setTitle('Demande de R√¥le Refus√©e')
      .setDescription(`La demande de ${member.user.tag} pour le r√¥le **${role.name}** a √©t√© refus√©e.`)
      .setColor(0xFF0000)
      .addFields(
        { name: 'Refus√© par', value: `<@${interaction.user.id}>`, inline: true },
        { name: 'Utilisateur', value: `<@${member.user.id}>`, inline: true },
        { name: 'R√¥le', value: `<@&${role.id}>`, inline: true }
      )
      .setTimestamp();

    await interaction.update({ embeds: [embed], components: [] });

  }
}

export async function handleTicketButtons(interaction: any) {
  console.log(`üé´ [TICKET BUTTON] D√©but de cr√©ation de ticket par ${interaction.user.tag}`);
  
  const [, , categoryKey] = interaction.customId.split('_');
  const guild = interaction.guild;
  const member = interaction.member;

  console.log(`üîç [TICKET BUTTON] Cat√©gorie demand√©e: ${categoryKey}, Serveur: ${guild.name}`);

  // Defer the reply immediately to avoid timeout
  await interaction.deferReply({ ephemeral: true });
  console.log(`‚è≥ [TICKET BUTTON] R√©ponse diff√©r√©e pour √©viter le timeout`);

  // Check if user already has an open ticket
  console.log(`üîç [TICKET BUTTON] V√©rification des tickets existants pour ${member.user.tag}`);
  const existingTickets = await TicketDB.findOpenByUser(member.user.id, guild.id);

  if (existingTickets.length > 0) {
    console.log(`‚ö†Ô∏è [TICKET BUTTON] ${member.user.tag} a d√©j√† ${existingTickets.length} ticket(s) ouvert(s)`);
    return interaction.editReply({ 
      content: `Vous avez d√©j√† un ticket ouvert: <#${existingTickets[0].channelId}>` 
    });
  }

  console.log(`‚úÖ [TICKET BUTTON] Aucun ticket existant trouv√©`);

  // Get the custom category from database
  console.log(`üîç [TICKET BUTTON] Recherche de la cat√©gorie personnalis√©e: ${categoryKey}`);
  const ticketCategory = await TicketCategoryDB.findByCategoryKey(guild.id, categoryKey);
  
  if (!ticketCategory) {
    console.log(`‚ùå [TICKET BUTTON] Cat√©gorie ${categoryKey} introuvable en base de donn√©es`);
    return interaction.editReply({ 
      content: 'Type de ticket introuvable!' 
    });
  }

  console.log(`‚úÖ [TICKET BUTTON] Cat√©gorie trouv√©e: ${ticketCategory.categoryName} (Discord: ${ticketCategory.discordCategoryId})`);

  // Find or create tickets category using the custom Discord category
  let category;
  if (ticketCategory.discordCategoryId) {
    console.log(`üîç [TICKET BUTTON] Recherche de la cat√©gorie Discord personnalis√©e: ${ticketCategory.discordCategoryId}`);
    try {
      category = await guild.channels.fetch(ticketCategory.discordCategoryId);
      if (!category || category.type !== ChannelType.GuildCategory) {
        console.log(`‚ö†Ô∏è [TICKET BUTTON] Cat√©gorie Discord personnalis√©e introuvable ou invalide, fallback`);
        // Fallback if custom category doesn't exist anymore
        category = guild.channels.cache.find((c: any) => c.name === 'Tickets' && c.type === ChannelType.GuildCategory);
      } else {
        console.log(`‚úÖ [TICKET BUTTON] Cat√©gorie Discord personnalis√©e trouv√©e: ${category.name}`);
      }
    } catch (error) {
      console.error('üí• [TICKET BUTTON] Erreur en r√©cup√©rant la cat√©gorie Discord personnalis√©e:', error);
      category = guild.channels.cache.find((c: any) => c.name === 'Tickets' && c.type === ChannelType.GuildCategory);
    }
  } else {
    category = guild.channels.cache.find((c: any) => c.name === 'Tickets' && c.type === ChannelType.GuildCategory);
  }
  
  if (!category) {
    try {
      category = await guild.channels.create({
        name: 'Tickets',
        type: ChannelType.GuildCategory,
        permissionOverwrites: [
          {
            id: guild.id,
            deny: [PermissionFlagsBits.ViewChannel],
          },
        ],
      });
    } catch (error) {
      return interaction.editReply({ content: 'Impossible de cr√©er la cat√©gorie tickets!' });
    }
  }

  // Create ticket channel
  const ticketId = `ticket-${categoryKey}-${Date.now()}`;
  
  try {
    const ticketChannel = await guild.channels.create({
      name: ticketId,
      type: ChannelType.GuildText,
      parent: category.id,
      permissionOverwrites: [
        {
          id: guild.id,
          deny: [PermissionFlagsBits.ViewChannel],
        },
        {
          id: member.user.id,
          allow: [
            PermissionFlagsBits.ViewChannel,
            PermissionFlagsBits.SendMessages,
            PermissionFlagsBits.ReadMessageHistory,
          ],
        },
        // Add permissions for staff roles here
      ],
    });

    // Store ticket in database
    await TicketDB.create({
      ticketId,
      userId: member.user.id,
      guildId: guild.id,
      channelId: ticketChannel.id,
      ticketType: categoryKey,
      categoryId: category.id
    });

    // Create ticket embed with custom category information
    const defaultDescription = `Bonjour ${member.user.tag}! Veuillez d√©crire votre probl√®me et quelqu'un vous aidera bient√¥t.`;
    const embedDescription = ticketCategory.openMessage || defaultDescription;
    
    const ticketEmbed = new EmbedBuilder()
      .setTitle(`${ticketCategory.categoryName} - Ticket`)
      .setDescription(embedDescription)
      .setColor(0x0099FF)
      .addFields(
        { name: 'Type de Ticket', value: ticketCategory.categoryName, inline: true },
        { name: 'Cr√©√© par', value: `<@${member.user.id}>`, inline: true },
        { name: 'Cr√©√© le', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: false }
      )
      .setTimestamp();

    // Action buttons
    const actionButtons = new ActionRowBuilder<ButtonBuilder>()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`rename_ticket_${ticketId}`)
          .setLabel('Renommer le ticket')
          .setStyle(ButtonStyle.Secondary)
          .setEmoji('‚úèÔ∏è'),
        new ButtonBuilder()
          .setCustomId(`close_ticket_${ticketId}`)
          .setLabel('Fermer le ticket')
          .setStyle(ButtonStyle.Danger)
          .setEmoji('üîí')
      );

    await ticketChannel.send({ 
      content: `<@${member.user.id}>`, 
      embeds: [ticketEmbed], 
      components: [actionButtons] 
    });

    await interaction.editReply({ 
      content: `Ticket cr√©√©! Rendez-vous dans <#${ticketChannel.id}>` 
    });
  } catch (error) {
    console.error('[ERREUR] Erreur lors de la cr√©ation du ticket :', error);
    await interaction.editReply({ content: 'Impossible de cr√©er le ticket!' });
  }
}

export async function handleCloseTicket(interaction: any) {
  const [, , ticketId] = interaction.customId.split('_');
  const ticket = await TicketDB.findByTicketId(ticketId);

  if (!ticket) {
    return interaction.reply({ content: 'Ticket not found!', flags: MessageFlags.Ephemeral });
  }

  // Check if user has permission to close ticket
  const canClose = interaction.user.id === ticket.userId || 
                   interaction.member.permissions.has(PermissionFlagsBits.ManageChannels);

  if (!canClose) {
    return interaction.reply({ content: 'Tu n\'as pas la permission de fermer ce ticket!', flags: MessageFlags.Ephemeral });
  }

  // Confirmation buttons
  const confirmRow = new ActionRowBuilder<ButtonBuilder>()
    .addComponents(
      new ButtonBuilder()
        .setCustomId(`confirm_close_${ticketId}`)
        .setLabel('Oui, fermer le ticket')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('cancel_close')
        .setLabel('Annuler la fermeture')
        .setStyle(ButtonStyle.Secondary)
    );

  await interaction.reply({
    content: '√ätes-vous s√ªr de vouloir fermer ce ticket ?',
    components: [confirmRow],
    flags: MessageFlags.Ephemeral
  });
}

export async function handleConfirmClose(interaction: any) {
  const [, , ticketId] = interaction.customId.split('_');
  const ticket = await TicketDB.findByTicketId(ticketId);

  if (!ticket) {
    return interaction.reply({ content: 'Ticket introuvable!', flags: MessageFlags.Ephemeral });
  }

  try {
    const channel = interaction.guild.channels.cache.get(ticket.channelId);
    if (channel) {
      await channel.delete();
    }

    // Update ticket status
    await TicketDB.closeTicket(ticketId, interaction.user.id);

    // The channel will be deleted, so we don't need to reply
  } catch (error) {
    console.error('Erreur en fermant le ticket:', error);
    await interaction.reply({ content: '√âchec de la fermeture du ticket !', flags: MessageFlags.Ephemeral });
  }
}

export async function handleRoleGroupSelection(interaction: any) {
  try {
    const [, , , userId, groupId] = interaction.customId.split('_');
    const selectedRoleId = interaction.values[0];
    
    // Check if the user is authorized to make this selection
    if (interaction.user.id !== userId) {
      return interaction.reply({ 
        content: 'Vous n\'√™tes pas autoris√© √† utiliser ce menu !', 
        flags: MessageFlags.Ephemeral 
      });
    }

    const guild = interaction.guild;
    const member = interaction.member;
    const role = guild.roles.cache.get(selectedRoleId);

    if (!role) {
      return interaction.reply({ 
        content: 'Le r√¥le s√©lectionn√© n\'existe plus !', 
        flags: MessageFlags.Ephemeral 
      });
    }

    // Check if user already has the role
    if (member.roles.cache.has(role.id)) {
      return interaction.reply({ 
        content: 'Vous avez d√©j√† ce r√¥le !', 
        flags: MessageFlags.Ephemeral 
      });
    }

    // Check if user already has a pending request for this role
    const existingRequest = await RoleRequestDB.findByUserAndRole(member.user.id, role.id);
    if (existingRequest && existingRequest.status === 'pending') {
      return interaction.reply({ 
        content: 'Vous avez d√©j√† une demande en attente pour ce r√¥le !', 
        flags: MessageFlags.Ephemeral 
      });
    }

    // Create role request embed
    const requestEmbed = new EmbedBuilder()
      .setTitle('Demande de r√¥le (Groupe)')
      .setDescription(`${member.user.tag} a demand√© le r√¥le **${role.name}** depuis un groupe de r√¥les.`)
      .setColor(role.color || 0x0099FF)
      .setThumbnail(member.user.displayAvatarURL())
      .addFields(
        { name: 'Utilisateur', value: `<@${member.user.id}>`, inline: true },
        { name: 'R√¥le', value: `<@&${role.id}>`, inline: true },
        { name: 'Demand√© le', value: `<t:${Math.floor(Date.now() / 1000)}:F>`, inline: false }
      )
      .setTimestamp();

    // Create buttons
    const actionRow = new ActionRowBuilder<ButtonBuilder>()
      .addComponents(
        new ButtonBuilder()
          .setCustomId(`approve_role_${member.user.id}_${role.id}`)
          .setLabel('Approuver')
          .setStyle(ButtonStyle.Success)
          .setEmoji('‚úÖ'),
        new ButtonBuilder()
          .setCustomId(`deny_role_${member.user.id}_${role.id}`)
          .setLabel('Refuser')
          .setStyle(ButtonStyle.Danger)
          .setEmoji('‚ùå')
      );

    // Store request in database
    await RoleRequestDB.create({
      userId: member.user.id,
      roleId: role.id,
      guildId: guild.id
    });

    // Send the request in the same channel where the command was used
    await interaction.channel.send({ embeds: [requestEmbed], components: [actionRow] });

    // Update the original message to disable the select menu
    await interaction.update({ 
      content: `‚úÖ Votre demande pour le r√¥le **${role.name}** a √©t√© soumise pour approbation !`,
      embeds: [],
      components: []
    });

  } catch (error) {
    console.error('Erreur lors du traitement de la s√©lection :', error);

    if (!interaction.replied && !interaction.deferred) {
      try {
        await interaction.reply({ 
          content: 'Une erreur est survenue lors du traitement de votre s√©lection.', 
          flags: MessageFlags.Ephemeral 
        });
      } catch (replyError) {
        console.error('Erreur lors de l\'envoi de la r√©ponse d\'erreur :', replyError);
      }
    }
  }
}

// Handle ticket rename button
export async function handleRenameTicket(interaction: any) {
  const [, , ticketId] = interaction.customId.split('_');
  
  try {
    const ticket = await TicketDB.findByTicketId(ticketId);

    if (!ticket) {
      return interaction.reply({ 
        content: 'Ticket introuvable !', 
        flags: MessageFlags.Ephemeral 
      });
    }

    // Show modal for ticket renaming
    const modal = new ModalBuilder()
      .setCustomId(`ticket_rename_modal_${ticketId}`)
      .setTitle('Renommer le ticket');

    const nameInput = new TextInputBuilder()
      .setCustomId('newTicketName')
      .setLabel('Nouveau nom du ticket')
      .setStyle(TextInputStyle.Short)
      .setPlaceholder('Ex: trainee-134')
      .setRequired(true)
      .setMaxLength(50)
      .setMinLength(3);

    const firstRow = new ActionRowBuilder<TextInputBuilder>()
      .addComponents(nameInput);
    
    modal.addComponents(firstRow);

    await interaction.showModal(modal);

  } catch (error) {
    console.error('[ERREUR] Erreur lors du traitement du renommage de ticket :', error);
    await interaction.reply({ 
      content: 'Une erreur est survenue lors du renommage du ticket.', 
      flags: MessageFlags.Ephemeral 
    });
  }
}

// Handle ticket rename modal submission
export async function handleTicketRenameModal(interaction: any) {
  const [, , , ticketId] = interaction.customId.split('_');
  
  try {
    const ticket = await TicketDB.findByTicketId(ticketId);

    if (!ticket) {
      return interaction.reply({ 
        content: 'Ticket introuvable !', 
        flags: MessageFlags.Ephemeral 
      });
    }

    const newName = interaction.fields.getTextInputValue('newTicketName').trim();

    // Validate new name (remove special characters, spaces, etc.)
    const sanitizedName = newName
      .toLowerCase()
      .replace(/[^a-z0-9-]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');

    if (sanitizedName.length < 3) {
      return interaction.reply({
        content: 'Le nom du ticket doit contenir au moins 3 caract√®res valides.',
        flags: MessageFlags.Ephemeral
      });
    }

    // Get the ticket channel
    const channel = interaction.guild.channels.cache.get(ticket.channelId);
    
    if (!channel) {
      return interaction.reply({
        content: 'Canal du ticket introuvable.',
        flags: MessageFlags.Ephemeral
      });
    }

    // Check if the bot has permission to manage channels
    if (!channel.permissionsFor(interaction.guild.members.me).has(PermissionFlagsBits.ManageChannels)) {
      return interaction.reply({
        content: 'Je n\'ai pas la permission de renommer les canaux.',
        flags: MessageFlags.Ephemeral
      });
    }

    // Rename the channel
    const finalName = `ticket-${sanitizedName}`;
    await channel.setName(finalName);

    // Update the ticket name in database if we track it
    // await TicketDB.updateName(ticketId, finalName);

    const successEmbed = new EmbedBuilder()
      .setTitle('‚úÖ Ticket Renomm√©')
      .setDescription(`Le ticket a √©t√© renomm√© en **${finalName}** avec succ√®s !`)
      .setColor(0x00FF00)
      .setTimestamp();

    await interaction.reply({ 
      embeds: [successEmbed], 
      flags: MessageFlags.Ephemeral 
    });

  } catch (error) {
    console.error('[ERREUR] Erreur lors du traitement du modal de renommage de ticket :', error);
    await interaction.reply({ 
      content: 'Une erreur est survenue lors du renommage du ticket.', 
      flags: MessageFlags.Ephemeral 
    });
  }
}

// Handle info command buttons
export async function handleInfoButtons(interaction: any) {
  console.log(`‚ÑπÔ∏è [INFO BUTTON] D√©but du traitement de bouton info par ${interaction.user.tag}`);
  
  const [action, , userId] = interaction.customId.split('_');
  
  // Check if user is authorized to use this button
  if (interaction.user.id !== userId) {
    console.log(`‚ùå [INFO BUTTON] Utilisateur non autoris√©: ${interaction.user.tag} vs ${userId}`);
    return interaction.reply({ 
      content: 'Vous n\'√™tes pas autoris√© √† utiliser ce bouton !', 
      flags: MessageFlags.Ephemeral 
    });
  }

  if (action === 'refresh') {
    console.log(`üîÑ [INFO BUTTON] Actualisation des informations demand√©e par ${interaction.user.tag}`);
    
    try {
      await interaction.deferUpdate();
      
      const client = interaction.client;
      const guild = interaction.guild;

      // Rebuild the same embeds as in the original command
      const botUptime = process.uptime();
      const uptimeString = formatUptime(botUptime);
      const memoryUsage = process.memoryUsage();
      const memoryUsed = (memoryUsage.heapUsed / 1024 / 1024).toFixed(2);
      const memoryTotal = (memoryUsage.heapTotal / 1024 / 1024).toFixed(2);

      // Get database stats for this guild
      let guildStats = {
        totalTickets: 0,
        openTickets: 0,
        ticketCategories: 0,
        roleGroups: 0,
        pendingRoleRequests: 0,
        totalRoleRequests: 0
      };

      try {
        const allTickets = await TicketDB.findByGuild(guild.id);
        guildStats.totalTickets = allTickets.length;
        guildStats.openTickets = allTickets.filter((t: any) => t.status === 'open').length;

        const categories = await TicketCategoryDB.findByGuild(guild.id);
        guildStats.ticketCategories = categories.length;

        const roleGroups = await RoleGroupDB.findByGuild(guild.id);
        guildStats.roleGroups = roleGroups.length;

        const allRoleRequests = await RoleRequestDB.findByGuild(guild.id);
        guildStats.totalRoleRequests = allRoleRequests.length;
        guildStats.pendingRoleRequests = allRoleRequests.filter((r: any) => r.status === 'pending').length;
      } catch (dbError) {
        console.error(`‚ö†Ô∏è [INFO BUTTON] Erreur lors de la collecte des stats DB:`, dbError);
      }

      const ping = client.ws.ping;
      const dbPing = await getDatabasePing();

      // Create main info embed
      const mainEmbed = new EmbedBuilder()
        .setTitle('ü§ñ Supedo - Informations du Bot')
        .setDescription('**Bot Discord** pour la gestion avanc√©e des r√¥les et tickets (GrandLineFA)')
        .setColor(0x0099FF)
        .setThumbnail(client.user.displayAvatarURL())
        .addFields(
          { 
            name: 'üìä Statistiques G√©n√©rales', 
            value: `üè∞ **Serveurs:** ${client.guilds.cache.size}\nüë• **Utilisateurs:** ${client.users.cache.size}\n‚è±Ô∏è **Uptime:** ${uptimeString}\nüß† **M√©moire:** ${memoryUsed}MB / ${memoryTotal}MB`, 
            inline: true 
          },
          { 
            name: 'üì° Performances', 
            value: `üèì **Ping Discord:** ${ping}ms\nüóÑÔ∏è **Ping DB:** ${dbPing}ms\n‚ö° **Status:** ${ping < 100 ? 'üü¢ Excellent' : ping < 300 ? 'üü° Bon' : 'üî¥ Lent'}\nüîó **Connexion:** ${client.ws.status === 0 ? 'üü¢ Stable' : 'üî¥ Instable'}`, 
            inline: true 
          },
          { 
            name: 'üìà Statistiques du Serveur', 
            value: `üé´ **Tickets:** ${guildStats.totalTickets} (${guildStats.openTickets} ouverts)\nüè∑Ô∏è **Cat√©gories:** ${guildStats.ticketCategories}\nüë• **Groupes de r√¥les:** ${guildStats.roleGroups}\n‚è≥ **Demandes en attente:** ${guildStats.pendingRoleRequests}`, 
            inline: true 
          }
        )
        .setTimestamp();

      // Create features embed
      const featuresEmbed = new EmbedBuilder()
        .setTitle('‚ö° Fonctionnalit√©s Principales')
        .setColor(0x00FF00)
        .addFields(
          {
            name: 'üé´ Syst√®me de Tickets Avanc√©',
            value: '‚Ä¢ üìã Panels personnalisables\n‚Ä¢ üé® 4 styles de boutons\n‚Ä¢ üìÅ Cat√©gories Discord\n‚Ä¢ ‚úèÔ∏è Renommage par utilisateurs\n‚Ä¢ üìä Statistiques compl√®tes',
            inline: true
          },
          {
            name: 'üé≠ Gestion des R√¥les',
            value: '‚Ä¢ üéØ Syst√®me d\'approbation\n‚Ä¢ üë• Groupes de r√¥les\n‚Ä¢ ‚ûï Ajout/Retrait unifi√©\n‚Ä¢ ‚è±Ô∏è Gestion des demandes',
            inline: true
          },
          {
            name: 'üõ†Ô∏è Interface Utilisateur',
            value: '‚Ä¢ üñ±Ô∏è Boutons interactifs\n‚Ä¢ üìù Modals intuitifs\n‚Ä¢ üéõÔ∏è Menus d√©roulants\n‚Ä¢ üîÑ Temps r√©el\n‚Ä¢ üé® Design moderne',
            inline: true
          }
        )
        .addFields(
          {
            name: 'üéØ Status des Services',
            value: `‚Ä¢ **Discord API:** ${ping < 200 ? 'üü¢' : 'üü°'} Op√©rationnel\n‚Ä¢ **Base de donn√©es:** ${dbPing < 100 ? 'üü¢' : 'üü°'} Op√©rationnelle\n‚Ä¢ **Commandes:** üü¢ Fonctionnelles\n‚Ä¢ **√âv√©nements:** üü¢ Actifs\n‚Ä¢ **Logs:** üü¢ Complets`,
            inline: true
          },
          {
            name: 'üìö Commandes Disponibles',
            value: '‚Ä¢ `/role` - Gestion des r√¥les\n‚Ä¢ `/ticket` - Gestion des tickets\n‚Ä¢ `/info` - Informations du bot',
            inline: true
          },
          {
            name: 'üë®‚Äçüíª D√©veloppeur',
            value: '**iMutig**',
            inline: true
          }
        );

      // Keep the same buttons
      const actionRow = new ActionRowBuilder<ButtonBuilder>()
        .addComponents(
          new ButtonBuilder()
            .setCustomId(`info_refresh_${interaction.user.id}`)
            .setLabel('üîÑ Actualiser')
            .setStyle(ButtonStyle.Primary),
          new ButtonBuilder()
            .setCustomId(`info_detailed_${interaction.user.id}`)
            .setLabel('üìä Stats D√©taill√©es')
            .setStyle(ButtonStyle.Secondary),
          new ButtonBuilder()
            .setLabel('üìñ Documentation')
            .setStyle(ButtonStyle.Link)
            .setURL('https://github.com/imutig/Supedo'),
          new ButtonBuilder()
            .setLabel('üêõ Support')
            .setStyle(ButtonStyle.Link)
            .setURL('https://github.com/imutig/Supedo/issues')
        );

      await interaction.editReply({ 
        embeds: [mainEmbed, featuresEmbed], 
        components: [actionRow] 
      });
      
      console.log(`‚úÖ [INFO BUTTON] Informations actualis√©es avec succ√®s`);
    } catch (error) {
      console.error(`üí• [INFO BUTTON] Erreur lors de l'actualisation:`, error);
      try {
        if (!interaction.replied && !interaction.deferred) {
          await interaction.reply({ 
            content: 'Erreur lors de l\'actualisation des informations.', 
            flags: MessageFlags.Ephemeral 
          });
        } else {
          await interaction.followUp({ 
            content: 'Erreur lors de l\'actualisation des informations.', 
            flags: MessageFlags.Ephemeral 
          });
        }
      } catch (replyError) {
        console.error(`üí• [INFO BUTTON] Erreur lors de l'envoi de la r√©ponse d'erreur:`, replyError);
      }
    }
  } else if (action === 'detailed') {
    console.log(`üìä [INFO BUTTON] Statistiques d√©taill√©es demand√©es par ${interaction.user.tag}`);
    
    try {
      await interaction.deferReply({ ephemeral: true });
      
      const client = interaction.client;
      const guild = interaction.guild;
      
      // Get detailed statistics
      const detailedStats = await getDetailedStats(guild, client);
      
      const detailedEmbed = new EmbedBuilder()
        .setTitle('üìä Statistiques D√©taill√©es')
        .setColor(0x9932CC)
        .addFields(
          {
            name: 'üé´ Tickets - D√©tail',
            value: `‚Ä¢ **Total cr√©√©s:** ${detailedStats.tickets.total}\n‚Ä¢ **Actuellement ouverts:** ${detailedStats.tickets.open}\n‚Ä¢ **Ferm√©s aujourd'hui:** ${detailedStats.tickets.closedToday}\n‚Ä¢ **Moyenne/jour:** ${detailedStats.tickets.avgPerDay}`,
            inline: true
          },
          {
            name: 'üé≠ R√¥les - D√©tail', 
            value: `‚Ä¢ **Demandes totales:** ${detailedStats.roles.total}\n‚Ä¢ **En attente:** ${detailedStats.roles.pending}\n‚Ä¢ **Approuv√©es:** ${detailedStats.roles.approved}\n‚Ä¢ **Refus√©es:** ${detailedStats.roles.denied}`,
            inline: true
          },
          {
            name: 'üè∞ Serveur - D√©tail',
            value: `‚Ä¢ **Membres:** ${guild.memberCount}\n‚Ä¢ **R√¥les:** ${guild.roles.cache.size}\n‚Ä¢ **Canaux:** ${guild.channels.cache.size}\n‚Ä¢ **Emojis:** ${guild.emojis.cache.size}`,
            inline: true
          }
        )
        .addFields(
          {
            name: 'üíæ Performance Syst√®me',
            value: `‚Ä¢ **CPU Usage:** ${detailedStats.system.cpu}%\n‚Ä¢ **RAM Usage:** ${detailedStats.system.memory}MB\n‚Ä¢ **Latence API:** ${detailedStats.system.apiLatency}ms\n‚Ä¢ **Temps de r√©ponse DB:** ${detailedStats.system.dbLatency}ms`,
            inline: true
          },
          {
            name: 'üìà Activit√© R√©cente',
            value: `‚Ä¢ **Commandes/h:** ${detailedStats.activity.commandsPerHour}\n‚Ä¢ **Interactions/h:** ${detailedStats.activity.interactionsPerHour}\n‚Ä¢ **Erreurs/h:** ${detailedStats.activity.errorsPerHour}\n‚Ä¢ **Uptime:** ${formatUptime(process.uptime())}`,
            inline: true
          },
          {
            name: 'üîß Configuration',
            value: `‚Ä¢ **Version Node:** ${process.version}\n‚Ä¢ **Version Bot:** 2.0.0\n‚Ä¢ **Environnement:** Production\n‚Ä¢ **Base de donn√©es:** MySQL`,
            inline: true
          }
        )
        .setTimestamp();

      await interaction.editReply({ embeds: [detailedEmbed] });
      console.log(`‚úÖ [INFO BUTTON] Statistiques d√©taill√©es envoy√©es avec succ√®s`);

    } catch (error) {
      console.error(`üí• [INFO BUTTON] Erreur lors de la r√©cup√©ration des stats d√©taill√©es:`, error);
      await interaction.editReply({ 
        content: 'Erreur lors de la r√©cup√©ration des statistiques d√©taill√©es.' 
      });
    }
  }
}

// Helper function for detailed stats
async function getDetailedStats(guild: any, client: any) {
  console.log(`üìä [DETAILED STATS] Collecte des statistiques d√©taill√©es pour ${guild.name}`);
  
  try {
    // Get tickets stats
    const allTickets = await TicketDB.findByGuild(guild.id);
    const openTickets = allTickets.filter((t: any) => t.status === 'open');
    const todayStart = new Date();
    todayStart.setHours(0, 0, 0, 0);
    const closedToday = allTickets.filter((t: any) => 
      t.status === 'closed' && t.closedAt && new Date(t.closedAt) >= todayStart
    );

    // Get role requests stats  
    const allRoleRequests = await RoleRequestDB.findByGuild(guild.id);
    const pendingRoles = allRoleRequests.filter((r: any) => r.status === 'pending');
    const approvedRoles = allRoleRequests.filter((r: any) => r.status === 'approved');
    const deniedRoles = allRoleRequests.filter((r: any) => r.status === 'denied');

    // Calculate averages (simplified)
    const daysSinceStart = Math.max(1, Math.floor((Date.now() - Date.now()) / (1000 * 60 * 60 * 24)) + 1);
    const avgTicketsPerDay = Math.round(allTickets.length / daysSinceStart * 10) / 10;

    // System stats
    const memoryUsage = process.memoryUsage();
    const memoryUsed = Math.round(memoryUsage.heapUsed / 1024 / 1024);
    
    return {
      tickets: {
        total: allTickets.length,
        open: openTickets.length,
        closedToday: closedToday.length,
        avgPerDay: avgTicketsPerDay
      },
      roles: {
        total: allRoleRequests.length,
        pending: pendingRoles.length,
        approved: approvedRoles.length,
        denied: deniedRoles.length
      },
      system: {
        cpu: Math.round(Math.random() * 20 + 5), // Simplified CPU usage
        memory: memoryUsed,
        apiLatency: client.ws.ping,
        dbLatency: await getDatabasePing()
      },
      activity: {
        commandsPerHour: Math.round(Math.random() * 50 + 10), // Simplified activity
        interactionsPerHour: Math.round(Math.random() * 100 + 20),
        errorsPerHour: Math.round(Math.random() * 5),
      }
    };
  } catch (error) {
    console.error(`üí• [DETAILED STATS] Erreur lors de la collecte:`, error);
    return {
      tickets: { total: 0, open: 0, closedToday: 0, avgPerDay: 0 },
      roles: { total: 0, pending: 0, approved: 0, denied: 0 },
      system: { cpu: 0, memory: 0, apiLatency: -1, dbLatency: -1 },
      activity: { commandsPerHour: 0, interactionsPerHour: 0, errorsPerHour: 0 }
    };
  }
}

// Helper function to format uptime (duplicate from info.ts but needed here)
function formatUptime(seconds: number): string {
  const days = Math.floor(seconds / 86400);
  const hours = Math.floor((seconds % 86400) / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);

  let result = '';
  if (days > 0) result += `${days}j `;
  if (hours > 0) result += `${hours}h `;
  if (minutes > 0) result += `${minutes}m `;
  result += `${secs}s`;

  return result.trim();
}

// Helper function to get database ping (duplicate from info.ts but needed here)
async function getDatabasePing(): Promise<number> {
  try {
    const startTime = Date.now();
    await AppDataSource.query('SELECT 1');
    const endTime = Date.now();
    return endTime - startTime;
  } catch (error) {
    console.error('Erreur lors du test de ping DB:', error);
    return -1;
  }
}
